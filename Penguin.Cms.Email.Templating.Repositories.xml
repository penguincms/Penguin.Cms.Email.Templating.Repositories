<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Cms.Email.Templating.Repositories</name>
    </assembly>
    <members>
        <member name="T:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository">
            <summary>
            An IRepository implementation for managing email templates and generating emails from them
            </summary>
        </member>
        <member name="P:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.EmailRenderer">
            <summary>
            An IEmailRenderer implementation used to bind the template as well as output HTML
            </summary>
        </member>
        <member name="P:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.EmailRepository">
            <summary>
            An IRepository information used to persist generated email messages
            </summary>
        </member>
        <member name="M:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext{Penguin.Cms.Email.Templating.EmailTemplate},Penguin.Email.Abstractions.Interfaces.IQueueAndSendMail,Penguin.Email.Templating.Abstractions.Interfaces.IEmailTemplateRenderer,Penguin.Messaging.Core.MessageBus)">
            <summary>
            Creates a new instance of this repository
            </summary>
            <param name="dbContext">The persistance context to be used when accessing templates</param>
            <param name="emailRepository">An IRepository information used to persist generated email messages</param>
            <param name="emailRenderer">An IEmailRenderer implementation used to bind the template as well as output HTML</param>
            <param name="messageBus">An optional message bus for sending EmailTemplate messages</param>
        </member>
        <member name="M:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.GenerateEmailFromTemplate(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.DateTime},System.String,System.Boolean,Penguin.Email.Abstractions.Interfaces.IEmailMessage)">
            <summary>
            Generates an email using the template(s) assigned to the given handler name
            </summary>
            <param name="Model">Binding Parameters. First is property name, second is value. Value can be string.</param>
            <param name="SendDate">The date the email should be queued to send on</param>
            <param name="HandlerName">The name of the handler generating this email. If null, an attempt is made to retrieve this value using the stack</param>
            <param name="skipCallerValidation">For when anything other than an action is calling the method</param>
            <param name="Overrides">An email message whos non-default values override the generated template values, useful for debugging by altering the output</param>
        </member>
        <member name="M:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.GenerateEmailFromTemplate(System.Collections.Generic.List{Penguin.Templating.Abstractions.TemplateParameter},System.Nullable{System.DateTime},System.String,System.Boolean,Penguin.Email.Abstractions.Interfaces.IEmailMessage)">
            <summary>
            Generates an email using the template(s) assigned to the given handler name
            </summary>
            <param name="parameters">Binding Parameters. First is property name, second is value. Value can be string.</param>
            <param name="SendDate">The date the email should be queued to send on</param>
            <param name="HandlerName">The name of the handler generating this email. If null, an attempt is made to retrieve this value using the stack</param>
            <param name="skipCallerValidation">For when anything other than an action is calling the method</param>
            <param name="Overrides">An email message whos non-default values override the generated template values, useful for debugging by altering the output</param>
        </member>
        <member name="M:Penguin.Cms.Email.Templating.Repositories.EmailTemplateRepository.GetEnabledTemplates(System.String)">
            <summary>
            returns a list of all enabled templates for a particular handler
            </summary>
            <param name="handlerName">The handler to retrieve email templates for</param>
            <returns>a list of all enabled templates for a particular handler</returns>
        </member>
    </members>
</doc>